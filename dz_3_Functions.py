# === –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

# 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞
def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


# 2. –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏–∑ —Ç—Ä—ë—Ö —á–∏—Å–µ–ª (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂)
def max_of_three(numbers):
    return max(numbers)


# 3. –ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–ø–æ –¥–≤—É–º –∫–∞—Ç–µ—Ç–∞–º)
def triangle_area(a, b):
    return 0.5 * a * b


# === –°–ª–æ–≤–∞—Ä—å —Å —Å—É–¥–∞–º–∏ ===

courts = {
    "A40": {
        "name": "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã",
        "address": "115225, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ë. –¢—É–ª—å—Å–∫–∞—è, 17"
    },
    "A56": {
        "name": "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥ –°–ü–± –∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
        "address": "191015, –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 50/52"
    },
    "A75": {
        "name": "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥ –ß–µ–ª—è–±–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
        "address": "454000, –≥. –ß–µ–ª—è–±–∏–Ω—Å–∫, —É–ª. –í–æ—Ä–æ–≤—Å–∫–æ–≥–æ, 2"
    }
}


# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===

def generate_header(defendant: dict, case_number: str) -> str:
    court_code = case_number.split('-')[0]  # –ü—Ä–∏–º–µ—Ä: A40 –∏–∑ A40-123456/2023
    court = courts.get(court_code, {
        "name": "–°—É–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "address": "–∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    })

    # üîÅ –î–ê–ù–ù–´–ï –ò–°–¢–¶–ê ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
    plaintiff = {
        "name": "–ü—É–ø–∫–∏–Ω –í–∞—Å–∏–ª–∏–π –ì–µ–Ω–Ω–∞–¥—å–µ–≤–∏—á",
        "inn": "1236182357",
        "ogrnip": "218431927812733",
        "address": "123534, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–æ–¥–Ω–∏–∫–æ–≤, 13"
    }

    return f"""
{court['name']}
–ê–¥—Ä–µ—Å: {court['address']}

–ò—Å—Ç–µ—Ü: {plaintiff['name']}
–ò–ù–ù {plaintiff['inn']} –û–ì–†–ù–ò–ü {plaintiff['ogrnip']}
–ê–¥—Ä–µ—Å: {plaintiff['address']}

–û—Ç–≤–µ—Ç—á–∏–∫: {defendant['name']}
–ò–ù–ù {defendant['inn']} –û–ì–†–ù {defendant['ogrn']}
–ê–¥—Ä–µ—Å: {defendant['address']}

–ù–æ–º–µ—Ä –¥–µ–ª–∞ {case_number}
""".strip()


# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—á–∏–∫–æ–≤ ===

def generate_headers_for_list(defendants: list):
    for defendant in defendants:
        print(generate_header(defendant, defendant["case_number"]))
        print("\n" + "-" * 60 + "\n")


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===

if __name__ == "__main__":
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:
    print("–§–∞–∫—Ç–æ—Ä–∏–∞–ª 5:", factorial(5))
    print("–ú–∞–∫—Å–∏–º—É–º –∏–∑ (3, 7, 1):", max_of_three((3, 7, 1)))
    print("–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ 3 –∏ 4:", triangle_area(3, 4))

    # –û—Ç–≤–µ—Ç—á–∏–∫–∏:
    respondents = [
        {
            "name": '–û–û–û "–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤ –û–∑–µ—Ä–æ"',
            "inn": "1231231231",
            "ogrn": "123124129312941",
            "address": "123534, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤—ã—Ö –º–æ–ª–¥–∞–≤—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–∑–∞–Ω, 69",
            "case_number": "A40-123456/2023"
        },
        {
            "name": '–û–û–û "–†–æ–º–∞—à–∫–∞"',
            "inn": "9876543210",
            "ogrn": "1111111111111",
            "address": "456000, –≥. –°–ü–±, —É–ª. –õ–µ–Ω–∏–Ω–∞, 5",
            "case_number": "A56-987654/2023"
        }
    ]

    generate_headers_for_list(respondents)
